---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Home",
    href: "#home",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: "Projects",
    href: "#projects",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2 3 3 3H10.4142L12.4142 5Z"></path></svg>`,
  },
  {
    label: "Contact",
    href: "#contact",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21.7267 2.95694L16.2734 22.0432C16.1225 22.5716 15.7979 22.5956 15.5563 22.1126L11 13L1.9229 9.36919C1.41322 9.16532 1.41953 8.86022 1.95695 8.68108L21.0432 2.31901C21.5716 2.14285 21.8747 2.43866 21.7267 2.95694ZM19.0353 5.09647L6.81221 9.17085L12.4488 11.4255L15.4895 17.5068L19.0353 5.09647Z"></path></svg>`,
  },
];
---

<div class="flex justify-center w-full">
  <nav
    id="main-nav"
    class="fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 top-0 w-[80%]"
  >
    <div class="container mx-auto flex items-center justify-between p-3">

      <!-- Profile (kiri di mobile, kanan di desktop) -->
    <div class="relative group flex-shrink-0 order-1 md:order-3">
      <img
        src="public/logo.webp"
        alt="Profile"
        class="w-10 h-10 rounded-full cursor-pointer border border-gray-500"
      />
      <div
        class="absolute left-1/2 -translate-x-1/2 mt-2 w-max max-w-full sm:max-w-xs px-3 py-1 bg-black text-white text-sm text-center rounded-lg opacity-0 scale-50 group-hover:opacity-100 group-hover:scale-100 transition-all duration-300 origin-top"
      >
        Hola, User! ðŸ§Š
      </div>
    </div>


      <ul
        id="nav-menu"
        class="flex w-full md:space-x-6 md:justify-center md:gap-12 gap-6 absolute md:static top-full left-0 bg-[var(--background)] md:bg-transparent flex-col md:flex-row items-center md:flex opacity-0 md:opacity-100 scale-95 md:scale-100 pointer-events-none md:pointer-events-auto transition-all duration-300 order-2"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group"
              >
                <div class="absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[#8eb9ff] nav-indicator hidden md:block" />
                <span class="md:hidden flex items-center justify-center w-6 h-6">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>

      <!-- Hamburger (kanan di mobile, hidden di desktop) -->
      <button
        id="hamburger"
        class="md:hidden order-3 ml-auto flex flex-col justify-center items-center space-y-1"
      >
        <span class="w-6 h-0.5 bg-white transition-all"></span>
        <span class="w-6 h-0.5 bg-white transition-all"></span>
        <span class="w-6 h-0.5 bg-white transition-all"></span>
      </button>
    </div>
  </nav>
</div>

<style>
  nav {
    transform: translateX(-50%);
    background-color: var(--background);
    transition: background-color 0.3s ease, border-radius 0.3s ease, border-color 0.3s ease;
  }

  nav.scrolling {
    background-color: var(--component-bg);
    border-color: #ffffff10;
    border-radius: 9999px;
  }

  nav a.active .nav-indicator {
    transform: translateY(-50%) scale(1);
    opacity: 1;
  }

  nav a.active {
    color: white !important;
  }

  /* Mobile */
  @media (max-width: 767px) {
    nav {
      width: 100% !important;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      position: fixed;
      border-radius: 0 0 1rem 1rem;
      border-color: #ffffff10;
    }
    nav.scrolling {
      border-radius: 0 0 1rem 1rem;
      background-color: var(--component-bg);
    }
    body {
      padding-top: 70px;
    }
  }

  /* Hamburger to X */
  #hamburger.active span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }
  #hamburger.active span:nth-child(2) {
    opacity: 0;
  }
  #hamburger.active span:nth-child(3) {
    transform: rotate(-45deg) translate(5px, -5px);
  }

  /* Menu toggle */
  #nav-menu.active {
    opacity: 1 !important;
    scale: 1 !important;
    pointer-events: auto !important;
  }
</style>
<script>
const nav = document.getElementById("main-nav");
const hamburger = document.getElementById("hamburger");
const navMenu = document.getElementById("nav-menu");
const maxScroll = 1000;
let rafId = null;

// =============================
// Update navbar on scroll
// =============================
function updateNav() {
  if (!nav) return;
  if (window.scrollY > 0) {
    nav.classList.add("scrolling");
    const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
    const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);
    const minWidth = 528;
    const maxWidth = window.innerWidth * 0.8;
    const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;
    if (window.innerWidth >= 768) {
      nav.style.setProperty("width", `${currentWidth}px`);
    }
  } else {
    nav.classList.remove("scrolling");
    nav.style.setProperty("width", "80%");
  }
  rafId = null;
}

window.addEventListener("scroll", () => {
  if (!rafId) rafId = requestAnimationFrame(updateNav);
}, { passive: true });

// =============================
// Dot indicator activation
// =============================
const navLinks = document.querySelectorAll("nav a");
const navIndicators = document.querySelectorAll(".nav-indicator");

function activateDot(targetHref: string) {
  // Reset semua dot
  navIndicators.forEach(ind => {
    (ind as HTMLElement).style.transform = "translateY(-50%) scale(0)";
    (ind as HTMLElement).style.opacity = "0";
  });

  // Aktifkan dot link tertentu
  const activeLink = document.querySelector<HTMLAnchorElement>(`nav a[href="${targetHref}"]`);
  const indicator = activeLink?.querySelector<HTMLDivElement>(".nav-indicator");
  if (indicator) {
    indicator.style.transform = "translateY(-50%) scale(1)";
    indicator.style.opacity = "1";
  }
}

// =============================
// Smooth scroll + click aktivasi dot
// =============================
navLinks.forEach(link => {
  link.addEventListener("click", e => {
    e.preventDefault();
    const href = link.getAttribute("href");
    if (!href) return;

    activateDot(href);

    // Scroll ke section
    const target = document.querySelector(href);
    if (target) target.scrollIntoView({ behavior: "smooth" });

    // Tutup menu mobile
    if (hamburger?.classList.contains("active")) {
      hamburger.classList.remove("active");
      navMenu?.classList.remove("active");
    }
  });
});

// =============================
// IntersectionObserver untuk scroll
// =============================
document.addEventListener("DOMContentLoaded", () => {
  const sections = document.querySelectorAll("section[id]");
  const observerOptions = { threshold: 0.6 };

  const observerCallback = (entries) => {
    entries.forEach(entry => {
      if(entry.isIntersecting) {
        const id = entry.target.getAttribute("id");
        if(id) activateDot(`#${id}`);
      }
    });
  };

  const observer = new IntersectionObserver(observerCallback, observerOptions);
  sections.forEach(section => observer.observe(section));
});

// =============================
// Hamburger toggle
// =============================
hamburger?.addEventListener("click", () => {
  hamburger.classList.toggle("active");
  navMenu?.classList.toggle("active");
});
</script>


